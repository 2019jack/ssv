package goeth

import (
	"encoding/hex"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	"github.com/bloxapp/ssv/eth1"
	"github.com/bloxapp/ssv/shared/params"
	"github.com/bloxapp/ssv/storage/collections"
	"github.com/bloxapp/ssv/storage/kv"
	"github.com/bloxapp/ssv/utils/logex"
)

var skBase64 = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBN2pXcExremd2TXdvRzhNdEVyUjJEaFQyTXV0SWZhR3RWbEx4NVYraDhqbCt2eXFPClYvcmxKREVlQy9HMzVpV0M0WEU3RnFKUVc1QmpvQWZ1TXhQelFDNnowQTVvUjd6dG5YdTZzRXdOSElIWHdEQUgKTHlTdVdQM3BGYlo0Qnc5b1FZTUJmbVNsL3hXR0syVnN3aVhkQ0VxRkpGZ01QWTc2UlBjSjZHZ2RNZytZVFFZVQpFamlRTjFpdmJKZjRWaUpCRTcrbVNteFZNNTAzVmlyQWZndkJ6cGd1M3N0dkh0elFXVnZ4cnQ1NHRGb0MwdGZYCk1RRXNSU0VtTVRoVkhocVorZTJCOC9kTWQ2R1FodnE5ZXR1RWFCTGhKWkVReWkySWlRTTZSWDZrTW9kZ0ZSZy8KemttTFZXQ0VITzEzaFV5Rkoxang1L0M5bEIyU2VENW9jd1h4YlFJREFRQUJBb0lCQUN3NFhlMndhOC9nZmxtWgpBOWNERlI5TUdPQWUrVmdKR1dwNi8xaTdSZzczU1dZbmVrRXUzRGE1djRBc0lSMWlQVWVvZzNXU01DU3ZTeTg4CkNhWUZ3QlJjRnhrNmMzVk54emFDNzRjbXR4QmhzakdGT1BBeGVRUWdMcExQU3J6VXlWL1ArQWtFbWlRZVZNZmQKampFRVltSFZvNTI1a3B3aTNLYk16VlFOYjg0STUyZEcwRXY4ZnNZbW1COHNDaGVkSVcrdDdjL1c3djFMT2VESwpWZ1FWNUpkSzBOeUtuVFpzdE9qck13eXZoTEcwNGlHVlZUZnJib3EyWk0yYTRZNkJ0V25YN2xCS3BhbWsxWUlKCkpqWlZ5WlowRmR5RlBWTklmVWNVYnVUeGJ3T0p5OE5tMmhsaGNjMlBzbWovQkJSNUFvYVpYcytyRThtcUEyeUkKcUVjZjVvRUNnWUVBOVpNb3RMS0xrL3RSbVFuNTlMbVhxaFlUS1VlMDdHV21ROGR0RlhuZDFBSlhkQ2I4U3BSdgpDTmVGQnhNQkVQZHBtSXdUWG9haURtNzRkNWRPb20xZWlDYTdCcHJ6cFVGM2VGSlBzdXV6ejA0eUVmaGVHRHd0ClZQOXA2RU9HZHlFK0pLR0gxc3BMelgwUkRIUENLUng5VnN1aVl3S0RLbkpSN3dEUTVwVWl5WkVDZ1lFQStGSjEKWkFjOVViSExISDROamJLeHRNL1Fwa3psVGw3bUxWYlpJZHFrMkcraktXbnIrYzJZN2hDQThFQW1tbXlSRGhvQQpOdWMyU08yVWpnY2crUHYvUjc2aHRUV1BGSCszdWd0ZWtZajMvRGdFZllVWEtBUFhYaGdQbnRNMDU2WlZFcHF3CmtzSXVQWGRROE9SRWs1Q2o4SFhPeE9rdEIwL01TZnU5WGRqVlhCMENnWUVBcElnOUhKd0hZbFZldlQ5dTVlVTIKMVRGSEUwQkUycUhjUE1zdnJkVGhwL3NOcHZlN3p5Z1dJSUZ0VW1rTUxOYm5POXFWMjU0dWs2Y0w5K3c3Tmg0NgoyTlBDT05HMmJrRW5qMGp1dHZ5dWt6VmIzS2hnT3JLTzJNVHJxejhhcDFSeGMwOTZXSkZmS2tVaUdBcXl5cUtZCjQzODV4RVpacFNYRStYRzloTS9rNTlFQ2dZQTZXZVlMNDBlZGN0SHZtQTlIUkw1TlpxZjQ3QWpXS2FhYzhOT0YKQ1FQRGVEZzIreFRnVmxlaFdXOXpCU0FOR1lYY2NtK3FkeHBpZUxGM3ptVUpITzRYeGN2cDhQUDJOU3pQSXV6Tgo5Z21QMHZuN0pOTVVMQkxub1cvS09vY3NDQUhscFVQb3VJaDFHUnlEL3ArK3JUWll3dFlibjA5ZGNIcm94NmJ2CjdvdjBZUUtCZ0gwem5Fend6ZEJVWTBBdFh6MUFTQjl1aUN6ZVNnbEZyRWwzR0k4OEEySXgyamFkMEhBR0NteVkKTnJBSVpLTjQ0anAzVjcvZ0IyMm9pQTIyK3VSTEEyMDJnM2RDaVRFYXRVMGY5SjhncDM4VGVrTHAvVmdTcHVpTgpLUm1YOGI5SlpXeGhpQk1OaXMwZjNuQnQ5VkRYN0crdEhJWS81QUNSSEtwNkZMUGhuYWVQCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
var eventData = "000000000000000000000000943a1b677da0ac80f380f08731fae841b1201402000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000308b406ca466dd2d245916c07b020a802d3f8cbd182b21907606984471e951b7130187a9ee35a02019d29e07103dec86ae000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b80000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556424e32705863457872656d643254586476527a684e64455679556a494b524768554d6b313164456c6d59556430566d784d654456574b326734616d7772646e6c7854315976636d784b5245566c517939484d7a567056304d3057455533526e464b55566331516d707651575a315458685165677052517a5a364d45453162314933656e52755748553263305633546b684a534668335245464954486c54645664514d334247596c6f30516e63356231465a54554a6d62564e734c33685852307379566e4e336156686b436b4e4663555a4b526d644e55466b334e6c4a5159306f325232646b545763725756525257565646616d6c52546a4670646d4a4b5a6a5257615570435254637262564e7465465a4e4e54417a566d6c7951575a6e646b494b656e426e64544e7a64485a496448705256315a3265484a304e545230526d39444d48526d5745315252584e53553056745456526f566b686f63566f725a544a434f43396b545751325231466f646e45355a58523152517068516b786f536c704655586c704d6b6c7055553032556c6732613031765a476447556d6376656d747454465a5851305649547a457a61465635526b6f78616e67314c304d3562454979553256454e57396a64316834436d4a525355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030969c70ef94517a717e6c72981798423e8358361f02ceb29dc0a0bd933b5dead7db1e300f77ee7f8ec8421571225e9f7c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000158727366704b7a6578712b312f4f7136673877664a41436b464c447052684c75504738544b6b6969564b63585171724951506f6647443832463157326b513442367779765a75794a306571434c366262395231334872786c4d5766306e4376465270714778334f32712f496a6d31325955476c53555257707a674c647544734d694c55342b3074327759514241786d78446265645733466d44476f697936546875497335777651746148633834362b46643175737778743631674d4e376c674f4270596c476e634731776139664a6c64434d4d58547566756b31305864336d6962754a70356f32415846695a4a79735778357072614838487638344967694a522b654551524f4f58736a49584a6d3133754d376e706a59707a58706930424f6851497942747270457047667839306a562b614c71515a314d535561762b322f306f684b4a58786f726a773177574d5a5075667941482f413d3d000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e4255555642623370566147467a534739486545315953337055627a67725348634b57475630656e4a7457454e594f546474655842706148686a4c32777853456c6c53565677563256334e6b464e4d7a6c5064314a515a3256564d465a33516d51324e485a68627a5a7354544e615157785464565a6c4d677061626c4e305430314a636b4a5457475673596b633062314272524735785a6b4e4e62474a6d6131524e526c685856466f776445314964474a77566b55334e326f3061457078615549335a553133596974774e585578436c6f764e6d5678576a5a6d5257526e4f4449354d7a4e335a55686856574e7a64325a4a516d68594e6c4e61556a4e6c4d6b4a7652554a3262486c6a4e4535454e45466f4e5646615a6a4d7252577078536974356448594b63336869526d354d4e55704c5757686a536c6334596d7443647a4e6f4d3256726555597959324932655545334d336473547a5a68576b6c6152574a34516b453057446c34576a684d534642614e484a59574739476277706f4d564643643149784f555668656d463562306831546d4a6b574770426255396863315669543074744e464a42646b3979613146775a31493453304a344e474d7a637a6b304f466c696454424a526b745162304e49436b4a335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030a659b21d027d1cae5681a506c1ef789b38abd6aaa12681fc970423257ba1776615ff8d1566b55fd4b85bbc8475d1932d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000015865523055424b5162494579796d6174307647445266454a375249453464796154664546584636306f48634d504a434c627833645663594336714e47646d2f33374c39356e3146426d467a57435749466431584357724933395849374163436c73444d7a556c435164524a5a4e58796e4d46414253364a554c484f647a2b77423356662f6f415259475946466c473747696e6634677439336e51344e554d49555857675a33617138566869787a42424a6449346a6f337257475548594e45614a6357364a697458543544424f6a4b2b6c692b457644576f7342344c7373312b614b43696274334f515656474254446d47507643564372665953337148785567524549626543704c752b302f6b36514c54795167477032665a62785a705468524e55467231697579647935553466375856726633646e3975636d546c7a43434f317331795a463933382b505363497274383050476a3557773d3d000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e4255555642636a5a586330396b4d7a4a5a5653745065566f7756565a74556c594b516b68455245744c4d3255314f545270557a56326448524c4d564a694d6c5659643359774e475a4b634764344c314e51576d6c71556d45306546646d63335a7361544d7865486731633273724d6c68364f544a3156516f35546c45344f47526c4c305978656d4a74616e51774d323577576a686153323533636d314c4f585a55524539505a4659344d3152694d554e59547a466862334a3265564d314d4552695a546c536248453253474e44436e567554545261516e6b30534864765a3270425a6a5932595446436330383565477832526a63305545677252544a3051316b305a5659774c314d3456466448626a6834523064495457354754306c31556d524d5554414b656d4d7651307050566a42494b316461534556455a5463794e5538775231417754585630516d4e485a57453152334134636b5a7757486b764d444642646d6c58616a426e4d4464714d4652314d30685a4e30646c53776f765a564e544c3168574f474a55524734344d305a516245353457486479566d6c33637a6c306347787a54464d78655578534e30787854324e5959566c344e48524c59334672565451305546686d656d395565433942436d68335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030a25dff7d12f0ba6f903ce9860a93aeb0ce576af88943b80433826fd180e22f5eff832f181a58749e289905d862699f8f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001584c6b6a57485174526645775046356975522b626231694d2f3557596e6f3874767864537173374b72646b62394f336e2f7743666d6e7266774c4130325065455a4a777142536e466f5968454b6c62363832674e6a345953457763772f43675332646b544532525853645a424e396a6851657836653962716b36556b6b78746f77446d744d654153484e326f533965484f72644f73746e4f3041477935457552725038303861546c5965797a47523577613343626b70456255566656596d74706b5a334b2b4547355939517767794c73615a77534644304b5149595852764f477847324d72746a34665276704a4a7a337053644a424970635972717664546c5a6b6d626b4a6f73344f35423141764863486531512f4254356767366c6e6433434669583972556148675043734c5141777a62504735633547744e56776c776a4a6c347442495633463175304a5473346d64355950336b773d3d000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556426456497a5630686d55316c68576c45304e6a6b78656e52306154594b5a6c4242634578716132394c6379737251533930515764535658644862456858596d35694e6a4a5056553472613074545555353356576c4e4d4652775747644f564856534e47706a6457644b61314e54526c5253524170355745777653585270627a6c465a48453361456852513342455130784356464e59526c4e744d6a4a724e6c4e52626c6c476557733355564e6e646e6f795157396d4f584a3659566442516d566d556b5a5064557335436e465754303072627a686e526e467763586c51526e524a527939435653394662316c324d30464e5531413555574a4354585258536b4976635464325153745a4d5546725a454a6959554e756147466b4b3146555747774b5931566b537a526162485a314e566446576b784c6443394f4d6c5531524751776146683452584275526c6f334c3031534e56526e52566c324e466c336155704865574e795254464b5747565355324d724d3231445751704b656b567a596a4a50575442545a453833596a424d635764714d326856613052746345645653324e6f516c5179614777304e574a35616b3476616c5a6a555731726232396c5955677a53437432523249764e7a6856436b56335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000308673dea9da035f920430951f68d8ea47ae68ec6c8658d0c5bb74b393383a2edf0de0b1356ede428184227eada9150b6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001585a44714964776c617a305456544a723579374f61567231676c557a6f57456a394d3534534d534f3436744b316b655947417270666c475346345750696b6f4d2b6632536e76376e694c506d6a45594534486e71786579384656697a37654468616d572b536c4e7955495a6e504a4b58516361635246554971594f644b69527157627a676e454a6a4f6d636b3247714f684c6e7a53782f6e64516b486a56674535354b636f474975764d6b69507072344259422b706959486355716339474677485a764d2f6158645864464a4d684545525a335149326563557a75634f30344133506c304743507a65506473656b73563435325054776e43726d6b643069564d6c797550682b5a716d48486b566c5777565167414d3471706f68336b6d6a7432314a55746a585a7a4b49386c6275456747426f346734633935304c2f46634d4663375a547a344a58734639795a575643316f63384c78413d3d0000000000000000"

type EventObserver struct {
	t *testing.T
}

func (e *EventObserver) InformObserver(i interface{}) {
	validatorAddedEvent, ok := i.(eth1.ValidatorAddedEvent)
	require.True(e.t, ok)
	require.NotNil(e.t, validatorAddedEvent)
}

func (e *EventObserver) GetObserverID() string {
	return "id"
}

func TestReadingEventLogs(t *testing.T) {
	t.Run("Successfully Process ValidatorAdded Event", func(t *testing.T) {
		logger := *zap.L()
		db, err := kv.New("./data/db", logger, &kv.Options{InMemory: true})
		require.NoError(t, err)
		defer db.Close()
		operatorStorage := collections.NewOperatorStorage(db, &logger)
		require.NoError(t, operatorStorage.SetupPrivateKey(skBase64))

		contractAbi, err := abi.JSON(strings.NewReader(params.SsvConfig().ContractABI))
		require.NoError(t, err)
		e := &eth1GRPC{
			ctx:             nil,
			conn:            nil,
			logger:          logex.Build("SSV-CLI", zapcore.DebugLevel),
			contractEvent:   eth1.NewContractEvent("smartContractEvent"),
			operatorStorage: operatorStorage,
		}

		observer := EventObserver{t: t}
		e.GetContractEvent().Register(&observer)

		data, err := hex.DecodeString(eventData)
		require.NoError(t, err)
		err = e.ProcessValidatorAddedEvent(data, contractAbi, "ValidatorAdded")
		require.NoError(t, err)
	})
}

//func TestAddValidatorEvent(t *testing.T) {
//	t.Run("add", func(t *testing.T) {
//		threshold.Init()
//
//		logger := *zap.L()
//		db, err := kv.New("./data/db", logger, &kv.Options{InMemory: true})
//		require.NoError(t, err)
//		defer db.Close()
//		operatorStorage := collections.NewOperatorStorage(db, &logger)
//		validatorStorage := collections.NewValidatorStorage(db, &logger)
//
//		client, err := ethclient.Dial("ws://eth1-ws.stage.bloxinfra.com/ws")
//		require.NoError(t, err)
//
//		contractAddress := common.HexToAddress(params.SsvConfig().OperatorContractAddress)
//		query := ethereum.FilterQuery{
//			FromBlock: big.NewInt(4825778),
//			ToBlock:   big.NewInt(4825778),
//			Addresses: []common.Address{
//				contractAddress,
//			},
//		}
//
//		logs, err := client.FilterLogs(context.Background(), query)
//		require.NoError(t, err)
//
//		contractAbi, err := abi.JSON(strings.NewReader(params.SsvConfig().ContractABI))
//		require.NoError(t, err)
//
//		require.NoError(t, operatorStorage.SetupPrivateKey(skBase64))
//		sk, err := operatorStorage.GetPrivateKey()
//		operatorPublicKey, err := rsaencryption.ExtractPublicKey(sk)
//
//		for _, vLog := range logs {
//			fmt.Println("BlockNumber:     ", vLog.BlockNumber)
//			fmt.Println("TxHash:          ", vLog.TxHash.Hex())
//
//			fmt.Println(hex.EncodeToString(vLog.Data))
//
//			eventType, err := contractAbi.EventByID(vLog.Topics[0])
//			require.NoError(t, err)
//
//			event := eth1.ValidatorAddedEvent{}
//			err = contractAbi.UnpackIntoInterface(&event, eventType.Name, vLog.Data)
//			require.NoError(t, err)
//
//			fmt.Println("Validator PubKey:", hex.EncodeToString(event.PublicKey))
//			fmt.Println("Owner Address:   ", event.OwnerAddress.String())
//
//			ibftCommittee := map[uint64]*proto.Node{}
//			validatorShare := collections.ValidatorShare{}
//			for i := range event.OessList {
//				oess := &event.OessList[i]
//				fmt.Println("Index:           ", oess.Index)
//				fmt.Println("Operator PubKey: ", hex.EncodeToString(oess.OperatorPublicKey))
//				fmt.Println("Share PubKey:    ", hex.EncodeToString(oess.SharedPublicKey))
//				fmt.Println("Encrypted Key:   ", hex.EncodeToString(oess.EncryptedKey))
//
//				def := `[{ "name" : "method", "type": "function", "outputs": [{"type": "string"}]}]`
//				outAbi, err := abi.JSON(strings.NewReader(def))
//				if err != nil {
//					logger.Error("failed to define ABI", zap.Error(err))
//					continue
//				}
//
//				outOperatorPublicKey, err := outAbi.Unpack("method", oess.OperatorPublicKey)
//				if err != nil {
//					logger.Error("failed to unpack OperatorPublicKey", zap.Error(err))
//					continue
//				}
//				nodeID := oess.Index.Uint64() + 1
//				ibftCommittee[nodeID] = &proto.Node{
//					IbftId: nodeID,
//					Pk:     oess.SharedPublicKey,
//				}
//
//				if oessOperatorPublicKey, ok := outOperatorPublicKey[0].(string); ok {
//					oess.OperatorPublicKey = []byte(oessOperatorPublicKey)
//
//					// mock pubsub functionality
//					data, _ := json.Marshal(event)
//					var eventFromObserver eth1.ValidatorAddedEvent
//					require.NoError(t, json.Unmarshal(data, &eventFromObserver))
//
//					oess2 := eventFromObserver.OessList[i]
//					if strings.EqualFold(string(oess2.OperatorPublicKey), operatorPublicKey) {
//						out, err := outAbi.Unpack("method", oess2.EncryptedKey)
//						if err != nil {
//							logger.Error("failed to unpack EncryptedKey", zap.Error(err))
//							continue
//						}
//
//						if encryptedSharePrivateKey, ok := out[0].(string); ok {
//							decryptedSharePrivateKey, err := rsaencryption.DecodeKey(sk, encryptedSharePrivateKey)
//							if err != nil {
//								logger.Error("failed to decrypt share private key", zap.Error(err))
//								continue
//							}
//							decryptedSharePrivateKey = strings.Replace(decryptedSharePrivateKey, "0x", "", 1)
//
//							oess2.EncryptedKey = []byte(decryptedSharePrivateKey)
//							validatorShare.NodeID = nodeID
//
//							validatorShare.ValidatorPK = &bls.PublicKey{}
//							if err := validatorShare.ValidatorPK.Deserialize(event.PublicKey); err != nil {
//								logger.Error("failed to deserialize share public key", zap.Error(err))
//								return
//							}
//
//							validatorShare.ShareKey = &bls.SecretKey{}
//							if err := validatorShare.ShareKey.SetHexString(string(oess2.EncryptedKey)); err != nil {
//								logger.Error("failed to deserialize share private key", zap.Error(err))
//								return
//							}
//
//							ibftCommittee[nodeID].Sk = validatorShare.ShareKey.Serialize()
//						}
//					}
//
//				}
//
//				eventSignature := []byte("ItemSet(bytes32,bytes32)")
//				hash := crypto.Keccak256Hash(eventSignature)
//				fmt.Println(hash.Hex()) // 0xe79e73da417710ae99aa2088575580a60415d359acfad9cdd3382d59c80281d4
//			}
//
//			validatorShare.Committee = ibftCommittee
//			require.NoError(t, validatorStorage.SaveValidatorShare(&validatorShare))
//			v, err := validatorStorage.GetValidatorsShare(event.PublicKey)
//			require.NoError(t, err)
//			require.NotNil(t, v)
//
//			marshalValidatorShare, err := json.Marshal(&validatorShare)
//			if err != nil {
//				logger.Error("failed to marshal validator share", zap.Error(err))
//				return
//			}
//
//			var validatorShare2 collections.ValidatorShare
//			err = json.Unmarshal(marshalValidatorShare, &validatorShare2)
//			if err != nil {
//				logger.Error("failed to unmarshal validator share", zap.Error(err))
//			}
//
//			fmt.Println("TEST2:   ", validatorShare2.ValidatorPK.SerializeToHexStr())
//		}
//	})
//}
